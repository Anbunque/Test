name: Library Management App Build

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  BUILD_NUMBER: 1
  BUILD_VERSION: 1.0.0
  PYTHON_VERSION: 3.12
  MONGO_URI: mongodb://localhost:27017  # Set this to your local MongoDB URI or MongoDB Atlas URI

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set Environment Variables
      run: |
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV

    - name: Install MongoDB
      run: |
        choco install mongodb --version=4.4.6
        # Check if MongoDB service is running, if not, start it
        if (-not (Get-Service MongoDB -ErrorAction SilentlyContinue)) {
          net start MongoDB
        } else {
          Write-Host "MongoDB service is already running."
        }

    - name: Install Ngrok
      run: |
        choco install ngrok

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask
        pip install pymongo

    - name: Start Ngrok Tunnel (Foreground)
      run: |
        # Start ngrok in the foreground and log output to a specific file
        ngrok http 5000 > ngrok.log &  # Start ngrok and log to ngrok.log
        Start-Sleep -Seconds 30  # Give Ngrok time to establish the tunnel

    - name: Verify Ngrok Tunnel
      run: |
        # Try to read ngrok.log to ensure tunnel information is logged
        $ngrokLogPath = "ngrok.log"
        if (Test-Path $ngrokLogPath) {
          Get-Content $ngrokLogPath -Tail 20  # Get last 20 lines of ngrok log
        } else {
          Write-Host "Ngrok log file does not exist yet."
        }

    - name: Check Ngrok Tunnel via API (Retry)
      run: |
        # Retry checking Ngrok's tunnel status
        $retries = 5
        $url = "http://localhost:4040/api/tunnels"
        $success = $false
        for ($i = 0; $i -lt $retries; $i++) {
          try {
            $response = Invoke-RestMethod -Uri $url
            Write-Host "Ngrok Tunnel URL: $($response.tunnels[0].public_url)"
            $success = $true
            break
          } catch {
            Write-Host "Ngrok not yet available, retrying... ($($i+1)/$retries)"
            Start-Sleep -Seconds 10  # Wait 10 seconds before retrying
          }
        }
        if (-not $success) {
          Write-Host "Failed to connect to Ngrok after multiple attempts."
          exit 1  # Fail the job if Ngrok tunnel couldn't be established
        }

    - name: Run Flask App
      run: |
        python "V3 Komplete/app.py"  # Running the app.py to start the Flask server
      env:
        FLASK_APP: "V3 Komplete/app.py"
        FLASK_ENV: "development"
